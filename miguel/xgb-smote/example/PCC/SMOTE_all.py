#!/usr/bin/env python
# coding: utf-8

# Imported Libraries
import time
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tqdm import tqdm

# Classifier Libraries
from sklearn.metrics import roc_auc_score, average_precision_score
from sklearn.metrics import f1_score, balanced_accuracy_score
from sklearn.model_selection import RandomizedSearchCV
from sklearn.model_selection import StratifiedKFold
from sklearn.preprocessing import RobustScaler
from sklearn.pipeline import make_pipeline
from imblearn.over_sampling import SMOTE
from imblearn.pipeline import make_pipeline as imbalanced_make_pipeline
from imblearn.under_sampling import NearMiss
import xgboost as xgb

# Other libraries
import warnings
warnings.filterwarnings("ignore")


# Default colors
colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#7f7f7f', '#bcbd22', '#17becf']
EPS = 1e-6


# Load dataset
def load_dataset(file, label_col): # load_dataset('OSA-GeneAnnotation(BP).csv', 'entrez')
  df = pd.read_csv(file)
  label_df = df[label_col]
  df.drop([label_col], axis=1, inplace=True)

  return df, label_df


# Scale data
def scale_data(df, features): # scale_data(['ClosenessCentrality','Eccentricity','Degree','ClusteringCoefficient','TopologicalCoefficient','BetweennessCentrality','NeighborhoodConnectivity'])
  # RobustScaler is less prone to outliers
  rob_scaler = RobustScaler()

  i = 0
  for fn in features:
    scaled_feature = rob_scaler.fit_transform(df[fn].values.reshape(-1,1))
    df.drop([fn], axis=1, inplace=True)
    df.insert(i, fn, scaled_feature)
    i += 1

  return df


# Load type names
def load_type_name(file): # load_type_file('OSA-GeneAnnotation_names(BP).csv')
  tnames = pd.read_csv(file, header=None, names=['value', 'name'], dtype={'value': object, 'name': object})
  return tnames


# Select feature obj
def select_obj_feature(df, obj_features, threshold): # select_obj_feature(['0019509','0006457','0016226','0006508','0006810','0055085','0006096','0051205','0006418','0006355','0007165','0006396','0006189','0006099','0015977','0015940','0055114','0016070','0006833','0000105','0008152','0000272','0005975','0006265','0015979','0015995','0006779','0030001','0006605','0006886','0017038','0006629','0015937','0045454','0006437','0042549','0006400','0006470','0006098','0006573','0016117','0009765','0006412','0015976','0006364','0006367','0006468','0009234','0006855','0009058','0071951','0006520','0009088','0071805','0006821','0000917','0006436','0007205','0048544','0016075','0006535','0006139','0015031','0006631','0006259','0006281','0003333','0010024','0000160','0006614','0002098','0008033','0006662','0006221','0044237','0006424','0043039','0000154','0008652','0009165','0009116','0009156','0044249','0006505','0018160','0033014','0015992','0008219','0006351','0031123','0043631','0006979','0006777','0009813','0042398','0009231','0006814','0009082','0006730','0006435','0009785','0006817','0006487','0006414','0006430','0006807','0009107','0030163','0008299','0071722','0006465','0051188','0015986','0006427','0009987','0051252','0009308','0006796','0006428','0043086','0006289','0006413','0009408','0006790','0006069','0006729','0016559','0009089','0006006','0009416','0045038','0006857','0001522','0009451','0006749','0006754','0006812','0006353','0006431','0006801','0019538','0006415','0006352','0042254','0009094','0009584','0009585','0017006','0018106','0018298','0006163','0015969','0006788','0016485','0070588','0006260','0009306','0006450','0022900','0009228','0006164','0032957','0005978','0031167','0006544','0006563','0006108','0044262','0009052','0032259','0032968','0044238','0006334','0006426','0006633','0006568','0006464','0006597','0008295','0009081','0006546','0006542','0016480','0006298','0045005','0006694','0009396','0006000','0006003','0000079','0051726','0008643','0009168','0030494','0006783','0006887','0006824','0009236','0016114','0006223','0006811','0006541','0006537','0042026','0044267','0006388','0006014','0006073','0006419','0006952','0016310','0006595','0006564','0006571','0042218','0006438','0006433','0009435','0006402','0006072','0046168','0019752','0008610','0006168','0006421','0010027','0042558','0019430','0009252','0015684','0046939','0006184','0009073','0015746','0006950','0006012','0006423','0006760','0042823','0008615','0009439','0007050','0008654','0019464','0008360','0009273','0051301','0006310','0006974','0006869','0043043','0048268','0019836','0007067','0043412','0006434','0006750','0006813','0006432','0006165','0006183','0006228','0006241','0034755','0006506','0006200','0006308','0007018','0007264','0042545','0009725','0006913','0030244','0006284','0007017','0051258','0009664','0016567','0046274','0006725','0032312','0006486','0006081','0019953','0005985','0000103','0035556','0006071','0008283','0006644','0016042','0006536','0016043','0030036','0009607','0030833','0006559','0000077','0000226','0071577','0051013','0010215','0016049','0016311','0016192','0006102','0007275','0006354','0006357','0032784','0005992','0046488','0045892','0048193','0006511','0006066','0009247','0030259','0006032','0016998','0006909','0006278','0010338','0009086','0016125','0015991','0045116','0006820','0044070','0006888','0009611','0006499','0019856','0006879','0051603','0018279','0006561','0006422','0046417','0043085','0006635','0006461','0032012','0006596','0072488','0046836','0006166','0030042','0006626','0045039','0006591','0006207','0006222','0042546','0006275','0007021','0006566','0008272','0015671','0006526','0042450','0030418','0022904','0006106','0017183','0007186','0000902','0007010','0006302','0006452','0008612','0045901','0045905','0006122','0007030','0006865','0019318','0045900','0007047','0006744','0019307','0006808','0006425','0006621','0046034','0006333','0030071','0031145','0019673','0006090','0015780','0010315','0001510','0007155','0042256','0042255','0009966','0006665','0006680','0016575','0043161','0009102','0051186','0042176','0045980','0006479','0006825','0035434','0006897','0009405','0031120','0042742','0050832','0034968','0007034','0006839','0006397','0009072','0009443','0009909','0048573','0015743','0005986','0009690','0006471','0015770','0046470','0017148','0006306','0090116','0006527','0015074','0006904','0010044','0009790','0006094','0016068','0009873','0009269','0019419','0032313','0006021','0009415','0016458','0006606','0051103','0009250','0006208','0044205','0032065','0010029','0016973','0043666','0006370','0019370','0000162','0046835','0019358','0007585','0006446','0030488','0032324','0045893','0046907','0006379','0009103','0007154','0000398','0007049','0018342','0009245','0043461','0009067','0007031','0006013','0008616','0010038','0046373','0000245','0071267','0006231','0006545','0016568','0032955','0071705','0051276','0006075','0006914','0006891','0046854','0048015','0046938','0045944','0045010','0009733','0031929','0048280','0006366','1904668','0030041','0006282','0010508','0000184','0008380','0007131','0016570','0051090','0015693','0001932','0043401','0006338','0034227','0015914','0019288','0019363','0070481','0070966','0071025','0016925','0031668','0043044','0006420','0016598','0006885','0009059','0017004','0006476','0006659','0032502','0048478','0006270','0045226','0046080','0006826','0006261','0006269','0009186','0030261','0015936','0006348','0016573','0007020','0006884','0031047','0000724','1990426','0006556','0043066','0042128','0009312','0006672','0006467','0010264','0009446','0006772','0009229','0007166','0035435','0000042','0006562','0048278','0006007','0000413','0006188','0009152','0009452','0009098','0009097','0019725','0006383','0009113','0071266','0000723','0006303','0006177','0006529','0006429','0045040','0007062','0071704','0042773','0006555','0006890','0000045','0008202','0030245','0015696','0015851','0016036','0009910','0046949','0006097','0006570','0019310','0019295','0005991','2000028','0001678','0006525','0016579','0042752','0009688','0006873','0006481','0010223','1901601','0046654','0006637','0006002','0060003','0019556','0017003','0019478','0000918','0071918'])
  # Top most frequent features
  ans = [(df[objf].sum(), objf) for objf in obj_features]
  ans.sort(reverse=True)

  top_feature, i = list(), 0
  a, n = ans[i]
  while a >= threshold:
    top_feature.append(n)
    i += 1
    a, n = ans[i]

  print('Annotations: {0} -> {1}'.format(len(obj_features), len(top_feature)))
  return top_feature


# Splitting the Data
def split_data(df, target, n_splits, seed=None):
  X = df.drop(target, axis=1)
  y = df[target]
  sss = StratifiedKFold(n_splits=n_splits, random_state=seed, shuffle=False)
  for train_index, test_index in sss.split(X, y):
      original_Xtrain, original_Xtest = X.iloc[train_index], X.iloc[test_index]
      original_ytrain, original_ytest = y.iloc[train_index], y.iloc[test_index]
  # Turn into an array
  original_Xtrain = original_Xtrain.values
  original_Xtest = original_Xtest.values
  original_ytrain = original_ytrain.values
  original_ytest = original_ytest.values

  return original_Xtrain, original_ytrain, original_Xtest, original_ytest, sss


################
# Under-Sampling
################
def undersampling(rand_xgb, original_Xtrain, original_ytrain, original_Xtest, original_ytest, sss):
  # List to append the score and then find the average
  undersample_accuracy, undersample_balancedacc = list(), list()
  undersample_f1, undersample_auc, undersample_average_precision = list(), list(), list()

  # Cross Validating the right way
  for train, test in sss.split(original_Xtrain, original_ytrain):
    undersample_pipeline = imbalanced_make_pipeline(NearMiss(sampling_strategy='majority'), rand_xgb)
    undersample_model = undersample_pipeline.fit(original_Xtrain[train], original_ytrain[train])
    undersample_prediction = undersample_model.predict(original_Xtrain[test])

    undersample_accuracy.append(undersample_pipeline.score(original_Xtrain[test], original_ytrain[test]))
    undersample_balancedacc.append(balanced_accuracy_score(original_ytrain[test], undersample_prediction))
    undersample_f1.append(f1_score(original_ytrain[test], undersample_prediction))
    undersample_average_precision.append(average_precision_score(original_ytrain[test], undersample_prediction))
    undersample_auc.append(roc_auc_score(original_ytrain[test], undersample_prediction))

  # mean and std of metrics
  acc = (np.mean(undersample_accuracy), np.std(undersample_accuracy))
  bac = (np.mean(undersample_balancedacc), np.std(undersample_balancedacc))
  f1s = (np.mean(undersample_f1), np.std(undersample_f1))
  auc = (np.mean(undersample_auc), np.std(undersample_auc))
  avp = (np.mean(undersample_average_precision), np.std(undersample_average_precision))
  return acc, bac, f1s, auc, avp


################
# SMOTE Technique (Over-Sampling)
################
def oversampling_smote(rand_xgb, original_Xtrain, original_ytrain, original_Xtest, original_ytest, sss):
  # List to append the score and then find the average
  oversample_accuracy, oversample_balancedacc = list(), list()
  oversample_f1, oversample_auc, oversample_average_precision = list(), list(), list()

  # Implementing SMOTE Technique
  # Cross Validating the right way
  for train, test in sss.split(original_Xtrain, original_ytrain):
    # SMOTE happens during Cross Validation not before..
    pipeline = imbalanced_make_pipeline(SMOTE(sampling_strategy='minority'), rand_xgb)
    model = pipeline.fit(original_Xtrain[train], original_ytrain[train])
    best_est = rand_xgb.best_estimator_
    prediction = best_est.predict(original_Xtrain[test])

    oversample_accuracy.append(pipeline.score(original_Xtrain[test], original_ytrain[test]))
    oversample_balancedacc.append(balanced_accuracy_score(original_ytrain[test], prediction))
    oversample_f1.append(f1_score(original_ytrain[test], prediction))
    oversample_average_precision.append(average_precision_score(original_ytrain[test], prediction))
    oversample_auc.append(roc_auc_score(original_ytrain[test], prediction))

  # mean of metrics
  acc = (np.mean(oversample_accuracy), np.std(oversample_accuracy))
  bac = (np.mean(oversample_balancedacc), np.std(oversample_balancedacc))
  f1s = (np.mean(oversample_f1), np.std(oversample_f1))
  auc = (np.mean(oversample_auc), np.std(oversample_auc))
  avp = (np.mean(oversample_average_precision), np.std(oversample_average_precision))

  smote_prediction = best_est.predict(original_Xtest)
  auc_val = (roc_auc_score(original_ytest, smote_prediction), 0)

  return acc, bac, f1s, auc, avp#, auc_val


# Candidates to carry out further studies (i.e., in-vivo experiments in gene analysis)
def false_positive_smote(rand_xgb, original_Xtrain, original_ytrain, original_Xtest, original_ytest, sss):
  fp = list()

  # Implementing SMOTE Technique
  # Cross Validating the right way
  # accuracy_lst, balancedacc_lst, average_precision_lst, f1_lst, auc_lst = list(), list(), list(), list(), list()
  for train, test in sss.split(original_Xtrain, original_ytrain):
    pipeline = imbalanced_make_pipeline(SMOTE(sampling_strategy='minority'), rand_xgb) # SMOTE happens during Cross Validation not before..
    model = pipeline.fit(original_Xtrain[train], original_ytrain[train])
    best_est = rand_xgb.best_estimator_
    prediction = best_est.predict(original_Xtrain)
    _tmp = ((original_ytrain == 0) & (prediction == 1))
    _tmp = np.where(_tmp==True)[0].tolist()
    fp += _tmp

    # accuracy_lst.append(pipeline.score(original_Xtrain, original_ytrain))
    # balancedacc_lst.append(balanced_accuracy_score(original_ytrain, prediction))
    # f1_lst.append(f1_score(original_ytrain, prediction))
    # average_precision_lst.append(average_precision_score(original_ytrain, prediction))
    # auc_lst.append(roc_auc_score(original_ytrain, prediction))

  # acc = (np.mean(accuracy_lst), np.std(accuracy_lst))
  # bac = (np.mean(balancedacc_lst), np.std(balancedacc_lst))
  # f1s = (np.mean(f1_lst), np.std(f1_lst))
  # auc = (np.mean(average_precision_lst), np.std(average_precision_lst))
  # avp = (np.mean(auc_lst), np.std(auc_lst))

  smote_prediction = best_est.predict(original_Xtest)
  auc_val = roc_auc_score(original_ytest, smote_prediction)

  # return fp, acc, bac, f1s, auc, avp, auc_val
  return fp, auc_val


# Comparing metrics for the models
def compare_metrics(model, mname, top_features, mobj=0, mcom=1, mcri=['roc']):
  measures = ['acc','bac','f1s','roc','avp']
  mename = ['Accuracy','Balanced acc.','f1-score','AUC ROC','Avg. precision']
  best_target, target_auc, target_auc_std = list(), list(), list()
  for midx in range(len(measures)):
    ms, msn = measures[midx], mename[midx]
    y_diff, y_1, y_2 = list(), list(), list()
    c = 0
    for i in range(len(model[0][ms])):
      target = top_features[i]
      yarr = [model[m][ms][i] for m in range(len(model))]
      y_diff.append((yarr[mobj][0] - yarr[mcom][0], yarr, target))

      # Selection criteria
      if yarr[mobj][0] - yarr[mcom][0] > EPS:
        c += 1
        if ms in mcri:
          best_target.append(target)
          target_auc.append(yarr[mobj][0])
          target_auc_std.append(yarr[mobj][1])

    y_diff.sort(reverse=True)

    # print('{0}: oversampling is better than undersampling {1} times ({2:.2f}%)'.format(ms, c,(c*100)/len(xgb_under[ms])))

    X, yarr = np.array([y[2] for y in y_diff]), [y[1] for y in y_diff]
    Y, Ystd = list(), list()
    for yidx in range(len(model)):
      y, yd = np.array([t[yidx][0] for t in yarr]), np.array([t[yidx][1] for t in yarr])
      Y.append(y)
      Ystd.append(yd)
    plot_metric_std(X, Y, Ystd, mname, msn, '{0}_train'.format(ms))

  return best_target, target_auc, target_auc_std


# plot metric and score for validation
def plot_metric_val(x, y, ystd, yval, label, metric_name, file):
  fig, ax = plt.subplots(figsize=(10,4))
  x, y, ystd, yval = np.array(x), np.array(y), np.array(ystd), np.array(yval)
  plt.plot(x, y, 'o--', color=colors[0], label=label[0], linewidth=1)
  plt.fill_between(x, y - ystd, y + ystd, color=colors[0], alpha=0.5)
  plt.plot(x, yval, 'o--', color=colors[1], label=label[1], linewidth=1)

  plt.legend(loc='best', shadow=True, fontsize='medium')
  plt.xticks(rotation='vertical')
  plt.margins(0.015)
  plt.xlabel('Target')
  plt.ylabel(metric_name)
  plt.ylim(0,1)
  plt.tight_layout()
  # plt.show()
  plt.savefig('{0}.pdf'.format(file), format='pdf', dpi=600)
  plt.close()


# plot metric with std
def plot_metric_std(X, Y, Ystd, label, metric_name, file):
  fig, ax = plt.subplots(figsize=(10,4))
  for idx in range(len(Y)):
    plt.plot(X, Y[idx], 'o--', color=colors[idx], label=label[idx], linewidth=1)
    # plt.fill_between(X, Y[idx] - Ystd[idx], Y[idx] + Ystd[idx], color=colors[idx], alpha=0.5)

  plt.legend(loc='best', shadow=True, fontsize='medium')
  plt.xticks(rotation='vertical')
  plt.margins(0.015)
  plt.xlabel('Target')
  plt.ylabel(metric_name)
  plt.ylim(0,1)
  plt.tight_layout()
  # plt.show()
  plt.savefig('{0}.pdf'.format(file), format='pdf', dpi=600)
  plt.close()


# false positive to csv (through dataframe)
def false_positive_export(false_positive, best_target, label_df, tnames, auc_val):
  dtmp = dict()
  for k, v in zip(best_target, false_positive):
    dtmp[k] = pd.Series(v)
  fp_df = pd.DataFrame(dtmp)
  fp_df.to_csv(r'fp-genes.csv', index=False)
  data = list()

  for target, auct in zip(best_target, auc_val):
    # Count fp genes frequency
    fp_vc = pd.DataFrame(fp_df[target].value_counts(dropna=True, sort=True).reset_index())
    fp_count = fp_vc.shape[0]
    fp_vc.columns = ['value', 'counts']
    fp_vc['value'] = pd.to_numeric(fp_vc['value'], downcast='integer')
    mfp_target = fp_vc['counts'].max()

    # Replace target idx with name
    vc = fp_vc[fp_vc['counts'] == mfp_target]
    fp_names = list()
    for v in vc['value'].tolist():
      name = label_df.loc[v]
      fp_names.append(name)
    vc['value'] = fp_names

    data.append((target, tnames.loc[tnames['value']==target].values[0][1].strip(), fp_df[target].count(), len(fp_df[target].unique()), mfp_target, vc.shape[0], auct))

  res_df = pd.DataFrame(data, columns=['id','desc','totalfp','uniquefp','maxtries','freq','aucval'])
  res_df.sort_values(by=['freq'])
  res_df.sort_values(by=['aucval', 'maxtries'], ascending=False)
  res_df.to_csv(r'fp-resume.csv', index=False)


# training under vs over sampling
def training(df, obj_features, top_features, n_splits, seed=None):
  # Use RandomizedSearchCV to find the best parameters.
  # GradientBoosting Classifier
  xgb_params = {"max_depth": list(range(2,5,1)), "n_estimators": list(range(1,5,1)),
                "min_samples_leaf": list(range(5,7,1)), 'colsample_bytree': list(np.arange(0.1, 1.1, 0.1))}
  rand_xgb = RandomizedSearchCV(xgb.XGBClassifier(nthread=-1, random_state=seed), xgb_params, n_iter=4)

  xgb_under = {'acc':list(), 'bac':list(), 'f1s':list(), 'roc':list(), 'avp':list()}
  xgb_over = {'acc':list(), 'bac':list(), 'f1s':list(), 'roc':list(), 'avp':list()}
  xgb_over_wo = {'acc':list(), 'bac':list(), 'f1s':list(), 'roc':list(), 'avp':list()}

  for target in tqdm(top_features):
    t0 = time.time()

    Xtrain, ytrain, Xtest, ytest, sss = split_data(df, target, n_splits, seed)

    acc, bac, f1s, auc, avp = undersampling(rand_xgb, Xtrain, ytrain, Xtest, ytest, sss)
    xgb_under['acc'].append(acc)
    xgb_under['bac'].append(bac)
    xgb_under['f1s'].append(f1s)
    xgb_under['roc'].append(auc)
    xgb_under['avp'].append(avp)

    acc, bac, f1s, auc, avp = oversampling_smote(rand_xgb, Xtrain, ytrain, Xtest, ytest, sss)
    xgb_over['acc'].append(acc)
    xgb_over['bac'].append(bac)
    xgb_over['f1s'].append(f1s)
    xgb_over['roc'].append(auc)
    xgb_over['avp'].append(avp)

    # training only with obj features
    _df = df[obj_features]
    Xtrain, ytrain, Xtest, ytest, sss = split_data(_df, target, n_splits, seed)

    acc, bac, f1s, auc, avp = oversampling_smote(rand_xgb, Xtrain, ytrain, Xtest, ytest, sss)
    xgb_over_wo['acc'].append(acc)
    xgb_over_wo['bac'].append(bac)
    xgb_over_wo['f1s'].append(f1s)
    xgb_over_wo['roc'].append(auc)
    xgb_over_wo['avp'].append(avp)

    t1 = time.time()
    # print("Took {:.2}s".format(t1 - t0))

  best_target, bt_auc, bt_auc_std = compare_metrics([xgb_over, xgb_over_wo, xgb_under], ['Over sampling', 'Over sampling (wo)', 'Under sampling'], top_features)

  return best_target, bt_auc, bt_auc_std


def false_positive_analysis(df, best_target, t_auc, t_auc_std, n_splits=10, seed=None):
  # Use RandomizedSearchCV to find the best parameters.
  # GradientBoosting Classifier
  xgb_params = {"max_depth": list(range(2,5,1)), "n_estimators": list(range(1,5,1)),
                "min_samples_leaf": list(range(5,7,1)), 'colsample_bytree': list(np.arange(0.1, 1.1, 0.1))}
  rand_xgb = RandomizedSearchCV(xgb.XGBClassifier(nthread=-1, random_state=seed), xgb_params, n_iter=4)

  # xgb_trg = {'acc':list(), 'bac':list(), 'f1s':list(), 'roc':list(), 'avp':list(), 'auc_val':list()}
  xgb_trg = list()
  false_positive = list()

  for target in tqdm(best_target):
    t0 = time.time()

    # Splitting the Data (Original DataFrame)
    Xtrain, ytrain, Xtest, ytest, sss = split_data(df, target, 5, seed)
    sss = StratifiedKFold(n_splits=n_splits, random_state=seed, shuffle=False)

    # fp, acc, bac, f1s, auc, avp, auc_val = false_positive_smote(rand_xgb, Xtrain, ytrain, Xtest, ytest, sss)
    fp, auc_val = false_positive_smote(rand_xgb, Xtrain, ytrain, Xtest, ytest, sss)
    false_positive.append(fp)
    # xgb_trg['acc'].append(acc)
    # xgb_trg['bac'].append(bac)
    # xgb_trg['f1s'].append(f1s)
    # xgb_trg['roc'].append(auc)
    # xgb_trg['avp'].append(avp)
    xgb_trg.append(auc_val)

  # measures = ['acc','bac','f1s','roc','avp', 'auc_val']
  # mename = ['Accuracy','Balanced acc.','f1-score','AUC ROC','Avg. precision', 'AUC ROC (Validation)']
  # for idx in range(len(measures)):
  #   X = np.array(best_target)
  #   Y, Ystd = np.array([y[0] for y in xgb_trg[measures[idx]]]), np.array([y[1] for y in xgb_trg[measures[idx]]])
  #   plot_metric_std(X, [Y], [Ystd], ['Over-Sampling'], mename[idx], '{0}_fp'.format(measures[idx]))
  x = np.array(best_target)
  plot_metric_val(x, t_auc, t_auc_std, xgb_trg, ['Training', 'Validation'], 'AUC ROC', '{0}_val'.format('roc'))

  return false_positive, xgb_trg


# Main
def main():
  data_file = 'PCC.csv'
  type_file = 'go_name.csv'
  label_col = 'gene'
  features = ['BetweennessCentrality', 'ClosenessCentrality', 'ClusteringCoefficient', 'Degree', 'NeighborhoodConnectivity', 'TopologicalCoefficient']
  obj_features = ['0000012','0000019','0000023','0000025','0000027','0000028','0000045','0000050','0000053','0000054','0000055','0000056','0000070','0000076','0000077','0000079','0000082','0000103','0000105','0000122','0000132','0000160','0000162','0000184','0000187','0000209','0000212','0000226','0000244','0000245','0000256','0000266','0000272','0000278','0000281','0000288','0000289','0000290','0000301','0000302','0000304','0000338','0000349','0000350','0000373','0000379','0000380','0000381','0000387','0000388','0000389','0000390','0000394','0000395','0000398','0000413','0000422','0000423','0000447','0000448','0000453','0000454','0000460','0000461','0000462','0000463','0000466','0000467','0000469','0000470','0000472','0000480','0000488','0000489','0000492','0000494','0000495','0000578','0000706','0000710','0000712','0000717','0000719','0000723','0000724','0000725','0000727','0000730','0000737','0000738','0000740','0000819','0000902','0000911','0000919','0000956','0000957','0000958','0000963','0000965','0000967','0000972','0000973','0001113','0001174','0001188','0001193','0001510','0001522','0001525','0001558','0001560','0001561','0001578','0001666','0001672','0001676','0001678','0001682','0001708','0001709','0001731','0001732','0001887','0001934','0002084','0002098','0002100','0002128','0002143','0002181','0002183','0002184','0002188','0002191','0002215','0002229','0002238','0002926','0002933','0002938','0002939','0002940','0002949','0003333','0003352','0003400','0005975','0005977','0005978','0005980','0005982','0005983','0005985','0005986','0005987','0005990','0005992','0005993','0005997','0006000','0006002','0006003','0006004','0006006','0006007','0006011','0006012','0006013','0006015','0006020','0006021','0006024','0006032','0006044','0006045','0006047','0006048','0006065','0006069','0006071','0006072','0006073','0006075','0006081','0006084','0006085','0006086','0006090','0006094','0006096','0006097','0006098','0006099','0006101','0006102','0006103','0006104','0006106','0006107','0006108','0006109','0006116','0006120','0006121','0006122','0006123','0006139','0006144','0006145','0006148','0006152','0006154','0006164','0006166','0006168','0006177','0006183','0006188','0006189','0006207','0006208','0006210','0006212','0006221','0006222','0006223','0006225','0006226','0006227','0006228','0006231','0006233','0006235','0006241','0006259','0006260','0006261','0006264','0006265','0006266','0006267','0006268','0006270','0006271','0006272','0006273','0006275','0006281','0006283','0006284','0006285','0006289','0006290','0006296','0006297','0006298','0006301','0006302','0006303','0006306','0006307','0006308','0006310','0006312','0006315','0006325','0006333','0006334','0006336','0006337','0006338','0006342','0006349','0006351','0006352','0006353','0006355','0006357','0006360','0006361','0006362','0006364','0006366','0006367','0006368','0006369','0006370','0006376','0006378','0006379','0006383','0006384','0006386','0006388','0006390','0006396','0006397','0006400','0006401','0006402','0006405','0006406','0006408','0006412','0006413','0006414','0006415','0006417','0006418','0006419','0006420','0006421','0006422','0006423','0006424','0006425','0006426','0006427','0006428','0006429','0006430','0006431','0006432','0006433','0006434','0006435','0006436','0006437','0006438','0006446','0006450','0006452','0006457','0006458','0006464','0006465','0006468','0006469','0006470','0006471','0006473','0006474','0006479','0006482','0006486','0006487','0006488','0006490','0006491','0006497','0006499','0006501','0006506','0006508','0006511','0006513','0006515','0006516','0006517','0006518','0006520','0006521','0006522','0006526','0006527','0006528','0006529','0006531','0006535','0006536','0006537','0006538','0006541','0006542','0006544','0006546','0006551','0006552','0006555','0006556','0006557','0006558','0006559','0006561','0006563','0006564','0006565','0006566','0006568','0006569','0006570','0006571','0006572','0006573','0006574','0006587','0006592','0006593','0006596','0006597','0006598','0006605','0006606','0006607','0006611','0006612','0006614','0006616','0006617','0006620','0006621','0006623','0006624','0006625','0006626','0006627','0006629','0006631','0006633','0006635','0006637','0006641','0006642','0006644','0006646','0006650','0006651','0006654','0006655','0006656','0006659','0006661','0006662','0006665','0006672','0006680','0006694','0006696','0006723','0006725','0006729','0006730','0006734','0006739','0006740','0006741','0006744','0006749','0006750','0006751','0006753','0006754','0006760','0006772','0006777','0006779','0006780','0006782','0006783','0006784','0006788','0006790','0006796','0006801','0006807','0006808','0006809','0006810','0006811','0006812','0006813','0006814','0006816','0006817','0006820','0006821','0006825','0006826','0006829','0006844','0006850','0006851','0006855','0006857','0006865','0006869','0006873','0006874','0006875','0006878','0006879','0006880','0006882','0006883','0006884','0006885','0006886','0006887','0006888','0006890','0006891','0006893','0006895','0006896','0006897','0006898','0006900','0006904','0006906','0006913','0006914','0006915','0006949','0006952','0006955','0006970','0006971','0006972','0006974','0006979','0006986','0006990','0006995','0006996','0006997','0006998','0006999','0007004','0007005','0007010','0007015','0007017','0007018','0007019','0007020','0007021','0007023','0007029','0007030','0007031','0007032','0007033','0007034','0007035','0007041','0007043','0007049','0007050','0007051','0007052','0007059','0007062','0007064','0007076','0007091','0007093','0007094','0007095','0007097','0007098','0007099','0007112','0007129','0007130','0007131','0007140','0007141','0007142','0007143','0007155','0007163','0007165','0007166','0007186','0007188','0007202','0007205','0007219','0007229','0007263','0007264','0007266','0007275','0007276','0007338','0007346','0007389','0007568','0007584','0007623','0007639','0008033','0008053','0008104','0008152','0008154','0008202','0008219','0008283','0008284','0008295','0008299','0008356','0008360','0008361','0008380','0008610','0008612','0008614','0008615','0008618','0008643','0008652','0008654','0009051','0009052','0009058','0009060','0009062','0009063','0009067','0009072','0009073','0009082','0009083','0009086','0009088','0009089','0009090','0009094','0009095','0009097','0009098','0009099','0009102','0009107','0009113','0009116','0009117','0009143','0009150','0009156','0009165','0009187','0009204','0009220','0009225','0009226','0009228','0009229','0009231','0009234','0009236','0009245','0009247','0009249','0009251','0009252','0009257','0009259','0009263','0009266','0009267','0009269','0009270','0009294','0009298','0009299','0009303','0009306','0009308','0009312','0009314','0009395','0009396','0009408','0009409','0009411','0009413','0009414','0009415','0009416','0009423','0009435','0009443','0009446','0009448','0009451','0009452','0009553','0009554','0009555','0009556','0009558','0009559','0009561','0009567','0009584','0009585','0009607','0009610','0009611','0009612','0009615','0009616','0009617','0009620','0009623','0009624','0009625','0009626','0009627','0009630','0009631','0009635','0009637','0009638','0009639','0009640','0009641','0009642','0009643','0009644','0009646','0009647','0009648','0009649','0009650','0009651','0009652','0009653','0009657','0009658','0009660','0009662','0009664','0009682','0009685','0009686','0009687','0009688','0009690','0009691','0009693','0009694','0009695','0009696','0009697','0009698','0009704','0009718','0009723','0009725','0009729','0009733','0009734','0009735','0009736','0009737','0009738','0009739','0009740','0009741','0009742','0009744','0009745','0009749','0009750','0009751','0009753','0009765','0009767','0009768','0009772','0009773','0009785','0009786','0009787','0009788','0009789','0009791','0009793','0009800','0009808','0009809','0009813','0009816','0009817','0009825','0009826','0009827','0009828','0009832','0009833','0009834','0009835','0009845','0009846','0009850','0009851','0009853','0009854','0009855','0009859','0009860','0009862','0009863','0009864','0009865','0009867','0009870','0009871','0009873','0009877','0009880','0009901','0009902','0009903','0009904','0009908','0009909','0009910','0009911','0009926','0009932','0009933','0009934','0009938','0009939','0009944','0009954','0009955','0009956','0009958','0009959','0009960','0009961','0009964','0009965','0009966','0009969','0009970','0010014','0010015','0010016','0010019','0010020','0010021','0010022','0010023','0010024','0010025','0010026','0010027','0010029','0010030','0010031','0010032','0010037','0010038','0010039','0010043','0010044','0010047','0010048','0010050','0010051','0010052','0010069','0010071','0010073','0010074','0010075','0010077','0010078','0010080','0010081','0010082','0010087','0010089','0010090','0010091','0010093','0010094','0010097','0010099','0010100','0010103','0010104','0010109','0010112','0010113','0010114','0010115','0010116','0010117','0010118','0010119','0010120','0010121','0010124','0010136','0010142','0010143','0010148','0010150','0010152','0010154','0010155','0010158','0010162','0010165','0010167','0010183','0010186','0010187','0010188','0010189','0010190','0010192','0010193','0010196','0010197','0010198','0010199','0010200','0010201','0010204','0010205','0010206','0010207','0010212','0010214','0010215','0010216','0010218','0010219','0010222','0010223','0010224','0010225','0010226','0010227','0010228','0010229','0010230','0010231','0010234','0010235','0010236','0010239','0010241','0010244','0010252','0010253','0010256','0010258','0010262','0010264','0010265','0010267','0010268','0010269','0010270','0010271','0010273','0010274','0010275','0010286','0010304','0010305','0010306','0010311','0010315','0010325','0010332','0010336','0010337','0010338','0010344','0010345','0010358','0010364','0010366','0010374','0010375','0010381','0010383','0010387','0010389','0010390','0010405','0010409','0010411','0010417','0010424','0010426','0010431','0010446','0010447','0010448','0010449','0010452','0010468','0010476','0010478','0010492','0010493','0010497','0010498','0010499','0010500','0010501','0010506','0010507','0010508','0010555','0010564','0010569','0010581','0010582','0010584','0010587','0010588','0010597','0010599','0010603','0010608','0010617','0010622','0010623','0010628','0010629','0010636','0010638','0010728','0010731','0010777','0010821','0010845','0010847','0010923','0010928','0010929','0010930','0010951','0010960','0010971','0012501','0015031','0015074','0015690','0015691','0015693','0015696','0015706','0015708','0015711','0015714','0015739','0015741','0015743','0015744','0015757','0015768','0015770','0015786','0015811','0015812','0015846','0015853','0015854','0015866','0015867','0015914','0015918','0015919','0015936','0015937','0015938','0015942','0015969','0015976','0015977','0015979','0015986','0015990','0015994','0015995','0015996','0016024','0016032','0016036','0016042','0016050','0016070','0016075','0016094','0016101','0016102','0016104','0016114','0016117','0016120','0016121','0016123','0016125','0016126','0016131','0016132','0016139','0016180','0016192','0016197','0016226','0016233','0016236','0016242','0016246','0016255','0016310','0016311','0016320','0016441','0016444','0016458','0016477','0016480','0016485','0016540','0016554','0016556','0016558','0016559','0016560','0016567','0016570','0016573','0016575','0016576','0016578','0016579','0016584','0016598','0016925','0016926','0016973','0016998','0017004','0017006','0017009','0017014','0017126','0017148','0017157','0017183','0017186','0017196','0017198','0018002','0018008','0018023','0018026','0018027','0018105','0018107','0018160','0018192','0018206','0018230','0018258','0018279','0018283','0018298','0018342','0018343','0018344','0018364','0018401','0019048','0019216','0019243','0019252','0019253','0019264','0019265','0019284','0019285','0019287','0019288','0019290','0019303','0019305','0019310','0019318','0019323','0019343','0019344','0019346','0019354','0019358','0019365','0019367','0019370','0019375','0019388','0019408','0019419','0019427','0019428','0019430','0019432','0019433','0019438','0019441','0019464','0019478','0019482','0019499','0019500','0019509','0019521','0019538','0019544','0019563','0019628','0019632','0019646','0019673','0019674','0019676','0019693','0019722','0019740','0019748','0019752','0019853','0019856','0019877','0019878','0019915','0019919','0019941','0019953','0019985','0019988','0022417','0022900','0022904','0023014','0030001','0030007','0030010','0030026','0030031','0030036','0030041','0030042','0030071','0030091','0030148','0030149','0030150','0030154','0030163','0030174','0030187','0030198','0030242','0030244','0030245','0030259','0030261','0030307','0030322','0030388','0030418','0030422','0030433','0030488','0030490','0030497','0030574','0030581','0030639','0030702','0030836','0030838','0030865','0030866','0030912','0030951','0030968','0030970','0031023','0031047','0031048','0031053','0031054','0031063','0031081','0031087','0031098','0031110','0031118','0031119','0031120','0031122','0031123','0031124','0031145','0031146','0031167','0031204','0031222','0031297','0031347','0031348','0031349','0031365','0031396','0031407','0031408','0031425','0031426','0031468','0031507','0031534','0031538','0031540','0031554','0031573','0031647','0031848','0031929','0031930','0031935','0031936','0031938','0031952','0031990','0032006','0032012','0032042','0032055','0032147','0032194','0032204','0032258','0032259','0032264','0032324','0032366','0032367','0032418','0032434','0032436','0032446','0032447','0032456','0032465','0032467','0032469','0032482','0032502','0032504','0032508','0032509','0032511','0032515','0032527','0032543','0032544','0032776','0032784','0032786','0032790','0032869','0032875','0032876','0032877','0032885','0032886','0032922','0032940','0032955','0032956','0032957','0032958','0032959','0032960','0032963','0032968','0032970','0032981','0032984','0033014','0033045','0033108','0033169','0033194','0033215','0033260','0033314','0033316','0033317','0033345','0033354','0033355','0033356','0033358','0033384','0033387','0033388','0033396','0033484','0033499','0033523','0033528','0033539','0033540','0033542','0033566','0033567','0033587','0033611','0033614','0033615','0033617','0033619','0033674','0033683','0033962','0034051','0034052','0034063','0034067','0034088','0034196','0034213','0034220','0034224','0034314','0034337','0034355','0034356','0034389','0034398','0034402','0034427','0034453','0034462','0034473','0034475','0034476','0034477','0034497','0034498','0034501','0034551','0034553','0034587','0034599','0034605','0034620','0034622','0034625','0034626','0034628','0034629','0034724','0034727','0034728','0034755','0034757','0034765','0034969','0034975','0034976','0034982','0035065','0035066','0035067','0035194','0035196','0035265','0035303','0035308','0035336','0035344','0035352','0035372','0035435','0035436','0035437','0035493','0035494','0035542','0035556','0035616','0035627','0035652','0035970','0035999','0036065','0036071','0036092','0036149','0036228','0036257','0036258','0036261','0036292','0036297','0036377','0036498','0036503','0036529','0038202','0040008','0040010','0040019','0040029','0040031','0040034','0042023','0042026','0042127','0042128','0042138','0042144','0042147','0042148','0042149','0042176','0042183','0042246','0042254','0042255','0042256','0042273','0042274','0042276','0042304','0042335','0042343','0042351','0042352','0042353','0042371','0042372','0042407','0042446','0042450','0042538','0042542','0042545','0042546','0042548','0042549','0042550','0042594','0042631','0042732','0042742','0042744','0042752','0042753','0042759','0042761','0042766','0042770','0042776','0042779','0042789','0042790','0042791','0042793','0042795','0042796','0042797','0042819','0042823','0042866','0042868','0042981','0042989','0043001','0043007','0043039','0043044','0043066','0043067','0043068','0043069','0043085','0043086','0043087','0043100','0043111','0043132','0043137','0043161','0043162','0043171','0043248','0043328','0043335','0043407','0043433','0043447','0043448','0043461','0043484','0043486','0043488','0043547','0043562','0043570','0043609','0043618','0043620','0043622','0043631','0043653','0043666','0043686','0043693','0043928','0043953','0043966','0043967','0043968','0043970','0043985','0044030','0044070','0044205','0044206','0044208','0044210','0044211','0044237','0044238','0044255','0044262','0044375','0044571','0044572','0044772','0044773','0044774','0044778','0044805','0045003','0045017','0045036','0045037','0045038','0045039','0045040','0045041','0045046','0045047','0045048','0045053','0045056','0045087','0045088','0045089','0045116','0045132','0045143','0045144','0045165','0045168','0045227','0045292','0045324','0045332','0045333','0045337','0045338','0045454','0045471','0045487','0045489','0045490','0045491','0045492','0045493','0045595','0045604','0045694','0045717','0045721','0045732','0045739','0045786','0045787','0045793','0045814','0045815','0045824','0045836','0045839','0045841','0045842','0045857','0045892','0045893','0045899','0045900','0045901','0045903','0045905','0045910','0045930','0045943','0045944','0045948','0045951','0045995','0046033','0046034','0046040','0046081','0046084','0046085','0046103','0046104','0046166','0046167','0046168','0046177','0046184','0046203','0046208','0046274','0046294','0046321','0046339','0046345','0046355','0046373','0046396','0046417','0046467','0046470','0046473','0046474','0046486','0046488','0046496','0046498','0046500','0046506','0046512','0046513','0046514','0046521','0046621','0046622','0046653','0046654','0046655','0046656','0046685','0046686','0046688','0046713','0046739','0046740','0046741','0046777','0046785','0046825','0046833','0046834','0046835','0046854','0046855','0046856','0046900','0046901','0046907','0046938','0046951','0048015','0048026','0048034','0048096','0048193','0048194','0048205','0048208','0048209','0048211','0048229','0048232','0048235','0048236','0048254','0048255','0048268','0048278','0048280','0048283','0048312','0048316','0048354','0048358','0048364','0048366','0048367','0048437','0048439','0048440','0048441','0048442','0048443','0048444','0048449','0048455','0048457','0048459','0048478','0048479','0048480','0048481','0048507','0048509','0048510','0048511','0048527','0048530','0048544','0048564','0048571','0048572','0048573','0048574','0048575','0048576','0048577','0048578','0048579','0048586','0048587','0048589','0048608','0048638','0048639','0048653','0048654','0048657','0048658','0048731','0048759','0048767','0048825','0048829','0048830','0048831','0048833','0048856','0048868','0050482','0050665','0050684','0050687','0050688','0050790','0050821','0050826','0050829','0050832','0050891','0050992','0050994','0051013','0051014','0051016','0051017','0051026','0051028','0051083','0051085','0051091','0051096','0051103','0051123','0051131','0051156','0051168','0051176','0051179','0051188','0051205','0051209','0051214','0051225','0051228','0051252','0051259','0051260','0051262','0051276','0051289','0051301','0051302','0051304','0051315','0051321','0051351','0051382','0051383','0051415','0051443','0051453','0051455','0051484','0051502','0051513','0051555','0051560','0051568','0051569','0051570','0051592','0051596','0051598','0051601','0051603','0051604','0051607','0051639','0051645','0051646','0051647','0051693','0051701','0051707','0051726','0051754','0051762','0051775','0051781','0051782','0051788','0051792','0051865','0051924','0051938','0051973','0052324','0052325','0052543','0052546','0052576','0052746','0052837','0052865','0055046','0055062','0055064','0055065','0055069','0055070','0055072','0055073','0055075','0055078','0055085','0055088','0055114','0055122','0055129','0060145','0060148','0060149','0060236','0060261','0060267','0060321','0060359','0060548','0060623','0060628','0060773','0060776','0060918','0060968','0061015','0061024','0061025','0061077','0061087','0061158','0061187','0061408','0061458','0061635','0061817','0065002','0065003','0065004','0070059','0070072','0070084','0070125','0070131','0070143','0070178','0070179','0070192','0070207','0070212','0070291','0070370','0070407','0070413','0070417','0070455','0070475','0070476','0070478','0070481','0070509','0070534','0070536','0070537','0070588','0070676','0070681','0070716','0070734','0070813','0070814','0070816','0070827','0070863','0070868','0070897','0070898','0070914','0070919','0070921','0070932','0070933','0070940','0070966','0070973','0070979','0070981','0070987','0071025','0071028','0071034','0071035','0071036','0071037','0071038','0071039','0071040','0071042','0071044','0071048','0071049','0071050','0071051','0071108','0071139','0071158','0071163','0071171','0071215','0071218','0071242','0071244','0071248','0071249','0071277','0071284','0071329','0071365','0071368','0071395','0071446','0071454','0071456','0071457','0071470','0071472','0071479','0071480','0071481','0071482','0071485','0071486','0071492','0071493','0071555','0071569','0071577','0071586','0071596','0071630','0071669','0071702','0071704','0071705','0071712','0071731','0071763','0071786','0071805','0071816','0071897','0071901','0071918','0071922','0071951','0071985','0072318','0072321','0072334','0072344','0072387','0072488','0072583','0072593','0072598','0072657','0072659','0072671','0080005','0080006','0080009','0080021','0080022','0080024','0080026','0080027','0080028','0080034','0080037','0080038','0080040','0080050','0080060','0080065','0080110','0080111','0080112','0080113','0080117','0080119','0080136','0080141','0080142','0080143','0080147','0080153','0080156','0080162','0080163','0080167','0080171','0080177','0080178','0080179','0080180','0080182','0080183','0080186','0080188','0090058','0090063','0090071','0090110','0090114','0090143','0090148','0090156','0090158','0090228','0090229','0090266','0090305','0090307','0090332','0090333','0090351','0090391','0090410','0090414','0090502','0090506','0090522','0090548','0090549','0090615','0090627','0090628','0090630','0090646','0090657','0090693','0090696','0090697','0090698','0090708','0097054','0097222','0097264','0097275','0097352','0097428','0097552','0098586','0098653','0098702','0098710','0098717','0098719','0098721','0098755','0098789','0098849','0098869','0098876','0099402','0101030','1900027','1900034','1900055','1900057','1900060','1900087','1900140','1900150','1900364','1900368','1900425','1900426','1900457','1900458','1900459','1900490','1900706','1900864','1900865','1900871','1901001','1901002','1901006','1901031','1901135','1901137','1901141','1901183','1901259','1901333','1901342','1901355','1901371','1901430','1901528','1901535','1901562','1901565','1901601','1901671','1901672','1901695','1901698','1901969','1901972','1901997','1902000','1902025','1902065','1902066','1902074','1902171','1902182','1902183','1902184','1902326','1902347','1902456','1902457','1902476','1902478','1902479','1902504','1902584','1902600','1902626','1902659','1902661','1902749','1902975','1902977','1902979','1903003','1903034','1903292','1903338','1903424','1903457','1903507','1903602','1903730','1903775','1903862','1904143','1904161','1904216','1904263','1904278','1904294','1904430','1904482','1904668','1904825','1905034','1905168','1905182','1905183','1905393','1905428','1905499','1905613','1905642','1905775','1990019','1990052','1990058','1990059','1990067','1990074','1990110','1990116','1990258','1990388','1990426','1990481','1990542','1990559','1990573','1990575','1990592','1990641','1990937','2000001','2000009','2000011','2000012','2000014','2000022','2000024','2000025','2000028','2000031','2000032','2000033','2000042','2000068','2000123','2000134','2000142','2000234','2000280','2000377','2000379','2000469','2000541','2000582','2000630','2000636','2000652','2000653','2000693','2000694','2000762','2000779','2000904','2001009','2001022','2001141','2001173','2001253','2001289','2001294','2001295']
  top_features = ['0006355', '0006468', '0005975', '0006412', '0006952', '0006886', '0071555', '0006511', '0006979', '0016567', '0009451', '0055085', '0042744', '0015031', '0035556', '0006457', '0007275', '0045893', '0006281', '0045454', '0009651', '0055114', '0030154', '0045944', '0006508', '0006629', '0018105', '0046777', '0009734', '0031146', '0009414', '0006486', '0042742', '0051301', '0030163', '0016192', '0000398', '0009733', '0006888', '0009908', '0009738', '0009793', '0009737', '0007165', '0009658', '0009408', '0006364', '0006351', '0043161', '0045892', '0015979', '0006887', '0048544', '0016579', '0009058', '0006397', '0009416', '0051603', '0009409', '0006749', '0007018', '0006096', '0009555', '0006099', '0003333', '0030001', '0009834', '0006633', '0006357', '0046686', '0034605', '0006869', '0042026', '0016042', '0009664', '0002229', '0009742', '0006260', '0045490', '0032502', '0010468', '0006310', '0032147', '0018107', '0006813', '0051085', '0009736', '0006897', '0000302', '0050832', '0032482', '0030244', '0042545', '0000724', '0000226', '0000160', '0040008', '0031047', '0017148', '0009611', '0006520', '0000079', '0034599', '0019252', '0009909', '0008643', '0006890', '0006004', '0000278', '0023014', '0018298', '0009833', '0006396', '0000381']
  threshold = 30
  folds = 10
  fp_folds = 50
  seed = 32020

  df, label_df = load_dataset(data_file, label_col)
  df = scale_data(df, features)
  tnames = load_type_name(type_file)
  top_features = select_obj_feature(df, obj_features, threshold)

  # Annotations which the topological models improve the prediction model using ATTED data
  # atted = ['0006397', '0006281', '0055114', '0006886', '0006888', '0030244', '0045454', '0007165', '0006357', '0006457', '0006952', '0006096']

  targets, t_auc, t_auc_std = training(df, obj_features, top_features, n_splits=folds, seed=seed)
  false_p, auc_val = false_positive_analysis(df, targets, t_auc, t_auc_std, n_splits=fp_folds, seed=seed)
  false_positive_export(false_p, targets, label_df, tnames, auc_val)

main()
